# processor
Processor.name=com.s1.app.disbursements.process.DisbursementProcessor

# disbursement context type (type code in VFMInstr)
# could be define either by constant name or directly by the value
# either must be unique for all disbursement type (with a value equal or greater than 0)
# or a negative value for a list
Context.type=com.s1.emea.disbursement.common.TransactionTypes.MT100INTLPAY

# processing schedule type (the VFMSvcTypecdky in VFMProcSchd)
# could be define either by constant name or directly by the value
ProcessingSchedule.type=com.s1.emea.common.EMEAProcessingScheduleCodes.MT100INTLPAY

# Add the feature name for class of service
ClassOfServiceFeature.name=MT100INTLPAY

# Approvals
approvalSystemFactory.common=com.s1.app.disbursements.common.CorpApprovalSystemFactory

# common (or default) setting values
additionalData.common=com.s1.app.disbursements.dao.AdditionalData
convertor.common=com.s1.emea.disbursement.generic.dao.IntlGenericDisbConvertor
templateConvertor.common=com.s1.emea.disbursement.generic.dao.IntlGenericDisbTemplateConvertor

executeManager.common=com.s1.emea.disbursement.common.adapter.ThirdPartyExecuteManager
history=true

# All of the common validators
validator.common.00=com.s1.emea.disbursement.common.validator.CustomerValidator
validator.common.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
validator.common.20=com.s1.app.disbursements.validator.TypeCodeValidator
validator.common.30=com.s1.app.disbursements.validator.InstructionBalanceValidator
// NumberOfDaysValidator (fatal) must be before DateValidator (warning) to avoid both messages in same time
#validator.common.35=com.s1.emea.disbursement.common.validator.NumberOfDaysValidator
validator.common.40=com.s1.intl.disbursements.validator.DateValidator
validator.common.50=com.s1.app.disbursements.validator.InstructionValidator
validator.common.60=com.s1.app.disbursements.validator.AccountDebitEntitlementValidator 
validator.common.70=com.s1.emea.disbursement.common.validator.CurrencyAmountValidator


# All of the template validators
validator.template.00=com.s1.emea.disbursement.common.validator.CustomerValidator
validator.template.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
validator.template.20=com.s1.app.disbursements.validator.TypeCodeValidator
validator.template.30=com.s1.app.disbursements.validator.InstructionValidator
validator.template.40=com.s1.app.disbursements.validator.AccountDebitEntitlementValidator 
validator.template.50=com.s1.emea.disbursement.common.validator.TemplateNameValidator
validator.template.60=com.s1.emea.disbursement.common.validator.MaxAmountValidator


# All the 'by transaction' limit validators
#validator.limit.byTransaction.10=com.s1.app.disbursements.limits.validator.UALimitValidator
validator.limit.byTransaction.10=com.s1.app.disbursements.limits.validator.CLimitValidator
validator.limit.byTransaction.20=com.s1.app.disbursements.limits.validator.TxTCLimitValidator
#User Transaction NonRepetitive Limit:
validator.limit.byTransaction.30=com.s1.app.disbursements.limits.validator.TNRLimitValidator 

# All the cumulative limit validators
#validator.limit.cumulative.10=com.s1.app.disbursements.limits.validator.UDCALimitValidator
validator.limit.cumulative.10=com.s1.app.disbursements.limits.validator.CDCLimitValidator
validator.limit.cumulative.20=com.s1.app.disbursements.limits.validator.TxTDCCLimitValidator
#User Daily Cumulative Approver Limit:
validator.limit.cumulative.30=com.s1.app.disbursements.limits.validator.CommonDCLimitValidator
#Account Daily Cumulative Approver Limit:
validator.limit.cumulative.40=com.s1.app.disbursements.limits.validator.ADCLimitValidator

# All the validators executed on a 'ready to send' txn
validator.readyToSend.10=com.s1.app.disbursements.limits.validator.CDCCheckLimitValidator
validator.readyToSend.20=com.s1.app.disbursements.limits.validator.TxTDCCCheckLimitValidator
#User Approval NonRepetitive Limit (only checks on final approval since have it in this section):
validator.readyToSend.30=com.s1.app.disbursements.limits.validator.ANRLimitValidator
validator.readyToSend.40=com.s1.app.disbursements.limits.validator.CallerAddCumulativeLimitValidator

# All the validators executed on a 'ready to send' txn that were previously scheduled
validator.stillScheduled.10=com.s1.app.disbursements.limits.validator.ANRLimitValidator
validator.stillScheduled.20=com.s1.app.disbursements.limits.validator.CallerAddCumulativeLimitValidator

# All the validators executed on an old scheduled txn
validator.wasScheduled.10=com.s1.app.disbursements.limits.validator.CallerRemoveCumulativeLimitValidator


##############################
# currency/country/bank type #
##############################
# the currencies use the alpha 3 code or "local" for local currency
# the countries use the iso alpha 2 code
# the bank types use the description from the VFMCode table
# the available lists can be :
# - missing: the only available value is the default one
# - the value "all": all values are accepted
# - the value "all_intl_pmt": all values for international payments
# - the value "all_intl_pmt_wo_local": all values for international payments excluding local
# - a list of values comma-separated (,)

#defaultCurrency=GBP
availableCurrencies=all_intl_pmt


#################
# State Machine #
#################

stateMachine.common=com.s1.emea.disbursement.common.state.CBIStateMachine
stateMachineDefinition.common=StateMachine_EMEA

##################
# Adapter policy #
##################

# needed for verify and sign action
proxy.verifyNeeded.common=com.s1.app.disbursements.adapter.VerifyNeededProxy
proxy.multiAuthorization.common=com.s1.app.disbursements.adapter.MultipleAuthorizationAdapterProxy

# uncomment the following lines for a batch adapter only
adapterPolicy.common=com.s1.app.disbursements.adapter.DirectPolicy
proxy.direct.common=com.s1.app.disbursements.adapter.NullAdapterProxy

# uncomment the following lines for a real-time or batch adapter
#adapterPolicy.common=com.s1.app.disbursements.adapter.RealTimePolicy
#proxy.realTime.common=com.s1.app.disbursements.adapter.TestSentProxy
#proxy.batch.common=com.s1.app.disbursements.adapter.NullAdapterProxy

################
# instructions #
################

# debitor instruction
debitorInstruction.partyType=com.s1.app.disbursements.instruction.AccountInstruction
debitorInstruction.retriever.common=com.s1.app.disbursements.instruction.AccountInstructionRetriever
validator.debitorInstruction.10=com.s1.app.disbursements.validator.PartyTypeValidator

# creditor instruction
creditorInstruction.partyType=com.s1.emea.disbursement.generic.thirdparty.GenericThirdPartyInstruction
creditorInstruction.retriever.common=com.s1.emea.disbursement.generic.thirdparty.GenericThirdPartyInstructionRetriever
creditorInstruction.thirdParty.type.common=international_all
validator.creditorInstruction.10=com.s1.app.disbursements.validator.PartyTypeValidator
validator.creditorInstruction.20=com.s1.emea.disbursement.generic.validator.ThirdPartyRelevantValidator

# intermediary instruction
intermediaryInstruction.partyType=com.s1.emea.disbursement.common.bank.BankInstruction
intermediaryInstruction.retriever.common=com.s1.emea.disbursement.common.bank.BankInstructionRetriever
validator.intermediaryInstruction.10=com.s1.app.disbursements.validator.PartyTypeValidator

#########
# alert #
#########
# If an entry alert doesn't exist, it means no alert of that type must be
# triggered for this context.
# The speficied name is the name in the VALAlrtCnd table.
# The entry must also exist in com.s1.emea.common.alert.AlertNames


alert.paymentCreated=Payment Created
alert.paymentModified=Payment Modified
alert.awaitingFinalSignature=Awaiting Final Signature
alert.paymentSent=Payment Sent
alert.paymentSentFailed=Payment Sent Failed

#########
# audit #
#########
# 4 process properties are used for the creation of the AuditRecord:
# - auditRecord.function.XXXX: the audit function name
# - auditRecord.component.XXXX: the audit component name
# - auditRecord.class.XXXX: the object used to add all entries in the record
# - auditRecord.method.XXXX: the method used in the above object
# If auditRecord.function is not defined for the process, no audit will be done.
# The method defined must have the following signature:
# (AuditRecord _record, Object _object) where:
# - _record is the audit record with the component and the function already set;
# - _object is the object where to get the values to use in the addEntry methods
#   (i.e.: a ThirdPartyValue object in case of the CreateProcess)

# these are the default ones
# they could change for some processes (like the template ones)
auditRecord.component.common=Midas International Payment
auditRecord.class.common=com.s1.emea.disbursement.intl.audit.IntlThirdPartyElectronicAudit
auditRecord.method.common=addFullRecordForDrCrValue

#############
# processes #
#############

# when the user try to access the create screen
Process.initialize.className=com.s1.emea.disbursement.intl.mt100.process.IntPmtInitializeProcess
validator.initialize.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
validator.initialize.20=com.s1.emea.disbursement.common.validator.FromAccountsValidator

#############

# when the user try to create a new transaction
Process.create.className=com.s1.emea.disbursement.common.process.EMEACreateProcess
validator.create.10=com.s1.app.disbursements.validator.CommonValidator
validator.create.Y0=com.s1.app.disbursements.limits.validator.CallerTransactionLimitValidator
validator.create.Z0=com.s1.emea.disbursement.common.validator.CallerReadyToSendValidator
auditRecord.function.create=Create Midas International Payment
history.add.create=true
entitlement.create=/payment/Mt100/IntlPay/create_modify

# this is executed just before we create a new transaction from import.
Process.preCreateFromImport.className=com.s1.emea.disbursement.intl.wire.imprt.IntlWireSupportingProcess
validator.preCreateFromImport.10=com.s1.app.disbursements.validator.NullValidator

# when the user try to retrieve a transaction
Process.get.className=com.s1.app.disbursements.process.GetProcess
validator.get.00=com.s1.emea.disbursement.common.validator.CustomerValidator
validator.get.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
//validator.get.20=entitlements validator (for view only)

# when the user try to modify a transaction
Process.modify.className=com.s1.emea.disbursement.common.process.EMEAModifyProcess
validator.modify.10=com.s1.app.disbursements.validator.CommonValidator
validator.modify.Y0=com.s1.app.disbursements.limits.validator.CallerTransactionLimitValidator
validator.modify.Z0=com.s1.emea.disbursement.common.validator.CallerReadyToSendOrWasScheduledValidator
auditRecord.function.modify=Modify Midas International Payment
history.add.modify=true
entitlement.modify=/payment/Mt100/IntlPay/create_modify

# when the user try to delete a transaction
Process.delete.className=com.s1.app.disbursements.process.DeleteProcess
validator.delete.00=com.s1.emea.disbursement.common.validator.CustomerValidator
validator.delete.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
validator.delete.20=com.s1.app.disbursements.validator.AccountDebitEntitlementValidator
validator.delete.Z0=com.s1.emea.disbursement.common.validator.CallerWasScheduledValidator
auditRecord.function.delete=Delete Midas International Payment
entitlement.delete=/payment/Mt100/IntlPay/create_modify

#############

#############

# when the user try to create a new template
Process.createTemplate.className=com.s1.emea.disbursement.common.process.EMEACreateTemplateProcess
validator.createTemplate.10=com.s1.app.disbursements.validator.CallerTemplateValidator
#validator.createTemplate.Y0=com.s1.intl.disbursements.limits.validator.CTemplateLimitValidator
#validator.createTemplate.Z0=com.s1.intl.disbursements.limits.validator.TxTCTemplateLimitValidator
auditRecord.component.createTemplate=Midas International Template
auditRecord.function.createTemplate=Create Midas International Template
auditRecord.method.createTemplate=addFullTemplateRecordForDrCrValue
history.add.createTemplate=true
entitlement.createTemplate=/payment/Mt100/IntlPay/template/create_modify

# when the user try to retrieve a template
Process.getTemplate.className=com.s1.app.disbursements.process.template.GetTemplateProcess
validator.getTemplate.00=com.s1.emea.disbursement.common.validator.CustomerValidator
validator.getTemplate.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
//validator.getTemplate.20=entitlements validator (for view only)

# when the user try to modify a template
Process.modifyTemplate.className=com.s1.emea.disbursement.common.process.EMEAModifyTemplateProcess
validator.modifyTemplate.10=com.s1.app.disbursements.validator.CallerTemplateValidator
#validator.modifyTemplate.Y0=com.s1.intl.disbursements.limits.validator.CTemplateLimitValidator
#validator.modifyTemplate.Z0=com.s1.intl.disbursements.limits.validator.TxTCTemplateLimitValidator
auditRecord.component.modifyTemplate=Midas International Template
auditRecord.function.modifyTemplate=Modify Midas International Template
auditRecord.method.modifyTemplate=addFullTemplateRecordForDrCrValue
history.add.modifyTemplate=true
entitlement.modifyTemplate=/payment/Mt100/IntlPay/template/create_modify

# when the user try to delete a template
Process.deleteTemplate.className=com.s1.app.disbursements.process.template.DeleteTemplateProcess
validator.deleteTemplate.00=com.s1.emea.disbursement.common.validator.CustomerValidator
validator.deleteTemplate.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
validator.deleteTemplate.20=com.s1.app.disbursements.validator.AccountDebitEntitlementValidator 
auditRecord.component.deleteTemplate=Midas International Template
auditRecord.function.deleteTemplate=Delete Midas International Template
auditRecord.method.deleteTemplate=addFullTemplateRecordForDrCrValue
entitlement.deleteTemplate=/payment/Mt100/IntlPay/template/create_modify

#############

# when the user try to create a new transaction based on a template
Process.create-from_template.className=com.s1.emea.disbursement.common.process.EMEACreateProcess
validator.create-from_template.10=com.s1.app.disbursements.validator.CommonValidator
validator.create-from_template.Y0=com.s1.app.disbursements.limits.validator.CallerTransactionLimitValidator
validator.create-from_template.Z0=com.s1.emea.disbursement.common.validator.CallerReadyToSendValidator
auditRecord.function.create-from_template=Create Midas International Payment
history.add.create-from_template=true
entitlement.create-from_template=/payment/Mt100/IntlPay/create_from_template

#############



# validation performed to check if the user could verify the transaction
Process.verifyInit.className=com.s1.emea.disbursement.common.process.NoProcess
validator.verifyInit.10=com.s1.emea.disbursement.common.validator.UserVerifyValidator
validator.verifyInit.20=com.s1.app.disbursements.validator.CommonValidator
entitlement.verifyInit=/payment/Mt100/IntlPay/verify

# when the user try to verify a transaction
Process.verify.className=com.s1.app.disbursements.process.ModifyProcess
validator.verify.10=com.s1.emea.disbursement.common.validator.UserVerifyValidator
validator.verify.20=com.s1.app.disbursements.validator.CommonValidator
validator.verify.Y0=com.s1.app.disbursements.limits.validator.CallerTransactionLimitValidator
validator.verify.Z0=com.s1.emea.disbursement.common.validator.CallerReadyToSendValidator
auditRecord.function.verify=Verify Midas International Payment
history.add.verify=true
entitlement.verify=/payment/Mt100/IntlPay/verify

#############

# validation performed to check if the user can approve the transaction
Process.approveInit.className=com.s1.emea.disbursement.common.process.NoProcess
validator.approveInit.10=com.s1.emea.disbursement.common.validator.UserApprovalValidator
validator.approveInit.20=com.s1.app.disbursements.validator.CommonValidator
entitlement.approveInit=/payment/Mt100/IntlPay/sign

# when the user tries to approve a transaction
Process.approve.className=com.s1.emea.disbursement.common.process.CBIApproveProcess
validator.approve.10=com.s1.emea.disbursement.common.validator.UserApprovalValidator
validator.approve.20=com.s1.app.disbursements.validator.CommonValidator
validator.approve.Y0=com.s1.app.disbursements.limits.validator.CallerTransactionLimitValidator
validator.approve.Z0=com.s1.emea.disbursement.common.validator.CallerReadyToSendValidator
auditRecord.function.approve=Sign Midas International Payment
history.add.approve=true
entitlement.approve=/payment/Mt100/IntlPay/sign

# when the user fail to sign a transaction
Process.signFailedLog.className=com.s1.emea.disbursement.common.process.AuditProcess
auditRecord.function.signFailedLog=Sign Midas International Payment: signature failed

# when the maximum of failed attempts is exceeded during the sign action
Process.signLastFailedLog.className=com.s1.emea.disbursement.common.process.AuditProcess
auditRecord.function.signLastFailedLog=Sign Midas International Payment: exceeded failed attempt count


#############


# validation performed to check if the user could approve the template
Process.approveTemplateInit.className=com.s1.emea.disbursement.common.process.NoProcess
validator.approveTemplateInit.10=com.s1.emea.disbursement.common.validator.UserApproveTemplateValidator
validator.approveTemplateInit.20=com.s1.app.disbursements.validator.CallerTemplateValidator
entitlement.approveTemplateInit=/payment/Mt100/IntlPay/template/approve

# when the user try to approve a template
Process.approveTemplate.className=com.s1.app.disbursements.process.template.ApproveTemplateProcess
validator.approveTemplate.10=com.s1.emea.disbursement.common.validator.UserApproveTemplateValidator
auditRecord.component.approveTemplate=Midas International Template
auditRecord.function.approveTemplate=Approve Midas International Template
auditRecord.method.approveTemplate=addFullTemplateRecordForDrCrValue
history.add.approveTemplate=true
entitlement.approveTemplate=/payment/Mt100/IntlPay/template/approve



#############

# notify when a third party is modified
#Process.notify-thirdPartyModified.className=com.s1.emea.disbursement.common.process.ThirdPartyCRModifiedProcess

# when the third party used in the template is modified
# (called by notify-thirdPartyModified for each template using the third party)
#Process.modifyTemplate-thirdPartyModified.className=com.s1.app.disbursements.process.ModifyProcess
Process.modifyTemplate-thirdPartyModified.className=com.s1.emea.disbursement.common.process.EMEAModifyTemplateProcess
validator.modifyTemplate-thirdPartyModified.10=com.s1.app.disbursements.validator.NullValidator
adapterPolicy.modifyTemplate-thirdPartyModified=com.s1.app.disbursements.adapter.DirectPolicy
proxy.direct.modifyTemplate-thirdPartyModified=com.s1.app.disbursements.adapter.NullAdapterProxy
history.add.modifyTemplate-thirdPartyModified=true

# when the third party used in the transaction is modified
# (called by notify-thirdPartyModified for each txn using the third party)
#Process.modify-thirdPartyModified.className=com.s1.app.disbursements.process.ModifyProcess
#validator.modify-thirdPartyModified.10=com.s1.app.disbursements.validator.NullValidator
#adapterPolicy.modify-thirdPartyModified=com.s1.app.disbursements.adapter.DirectPolicy
#proxy.direct.modify-thirdPartyModified=com.s1.app.disbursements.adapter.NullAdapterProxy
#history.add.modify-thirdPartyModified=true

# notify when a third party is deleted
#Process.notify-thirdPartyDeleted.className=com.s1.emea.disbursement.common.process.ThirdPartyPaymentDeletedProcess

#############

Process.getTemplateSummaryByCriteria.className=com.s1.emea.disbursement.common.process.template.CBIGetTemplateSummaryByCriteriaProcess
summary.getTemplateSummaryByCriteria=com.s1.emea.disbursement.intl.common.InternationalTemplateSummary
validator.getTemplateSummaryByCriteria.10=com.s1.app.disbursements.validator.NullValidator

# count the number of txn affected by an operation with a given criteria
# (used by the third party framework and by notify-thirdPartyModified)
Process.count.className=com.s1.app.disbursements.process.CountProcess

# when the system needs tp retrieve a list of transactions by criteria
# (used by notify-thirdPartyModified)
Process.getByCriteria.className=com.s1.app.disbursements.process.GetByCriteriaProcess
validator.getByCriteria.10=com.s1.app.disbursements.validator.NullValidator

# to delete a set of transaction by criteria
# (used by notify-thirdPartyDeleted & notify-thirdPartyModified)
Process.deleteByCriteria.className=com.s1.app.disbursements.process.DeleteByCriteriaProcess
validator.deleteByCriteria.10=com.s1.app.disbursements.validator.NullValidator

# to delete a set of templates by criteria
# (used by notify-thirdPartyDeleted & notify-thirdPartyModified)
# (only needed if this context type is using template)
Process.deleteTemplateByCriteria.className=com.s1.app.disbursements.process.template.DeleteTemplateByCriteriaProcess
validator.deleteTemplateByCriteria.10=com.s1.app.disbursements.validator.NullValidator



#############

# when the user try to add a payment inside a payment set
#Process.addInSet.className=com.s1.app.disbursements.process.set.AddInSetProcess
#validator.addInSet.10=com.s1.app.disbursements.validator.NullValidator
#history.add.addInSet=true

# when the user try to remove a payment from a payment set
#Process.removeFromSet.className=com.s1.app.disbursements.process.set.RemoveFromSetProcess
#validator.removeFromSet.10=com.s1.app.disbursements.validator.NullValidator
#history.add.removeFromSet=true

# called on transactions in a payment set before approving the payment set.
# - pmt which will be approved (partially or fully)
# - pmt which will be released
#Process.approveInSetDateInit.className=com.s1.emea.disbursement.common.process.NoProcess
# validator used to update the date if in the past
#validator.approveInSetDateInit.10=com.s1.intl.disbursements.validator.DateValidator

# called on transactions in a payment set before approving the payment set.
# - pmt which will be approved (partially or fully)
#Process.approveInSetInit.className=com.s1.emea.disbursement.common.process.NoProcess
# validator make sure user can sign
#validator.approveInSetInit.10=com.s1.emea.disbursement.common.validator.UserApprovalValidator

# when the user try to approve a payment set
#Process.approve-inSet.className=com.s1.emea.disbursement.common.process.CBIApproveProcess
#adapterPolicy.approve-inSet=com.s1.app.disbursements.adapter.DirectPolicy
#proxy.direct.approve-inSet=com.s1.app.disbursements.adapter.NullAdapterProxy
#validator.approve-inSet.10=com.s1.emea.disbursement.common.validator.UserApprovalValidator
#validator.approve-inSet.20=com.s1.app.disbursements.validator.CommonValidator
#validator.approve-inSet.Y0=com.s1.app.disbursements.limits.validator.CallerTransactionLimitValidator
#validator.approve-inSet.Z0=com.s1.emea.disbursement.common.validator.CallerReadyToSendValidator
#auditRecord.function.approve-inSet=Sign Midas International Payment
#history.add.approve-inSet=true
#entitlement.approve-inSet=/payment/Mt100/IntlPay/sign

# release the payment (this is done during the approve of a payment set)
#Process.release.className=com.s1.app.disbursements.process.set.ReleaseProcess
#validator.release.10=com.s1.app.disbursements.validator.NullValidator
#history.add.release=true


#############

# Batch Processes
# There are 3 possible batch process configurations.
# One of these must be chosen to match the bci batch process that will be invoked
# Uncomment the required process and ensure the other two are commented
# The validators and audit remain the same regardless of process

# Process for ICRPIPMTRQST
#Process.executeData.className=com.s1.emea.disbursement.intl.wire.process.IntlPaymentExecuteProcess

## GENERIC
Process.executeData.className=com.s1.emea.disbursement.generic.process.GenericPaymentProcess

# Process for ICRPM101RQST
#Process.executeData.className=com.s1.emea.disbursement.intl.wire.process.SwiftMT101ExecuteProcess

# Process for ICRPM103RQST
#Process.executeData.className=com.s1.emea.disbursement.intl.wire.process.SwiftMT103ExecuteProcess

# Batch Validators
# called during the execution of the batch job for each transaction to send
#validator.executeData.00=com.s1.emea.disbursement.common.validator.TestAmountValidator
validator.executeData.10=com.s1.app.disbursements.validator.ClassOfServiceValidator
validator.executeData.20=com.s1.app.disbursements.validator.TypeCodeValidator
validator.executeData.30=com.s1.app.disbursements.validator.InstructionBalanceValidator
validator.executeData.50=com.s1.app.disbursements.validator.InstructionValidator
validator.executeData.70=com.s1.emea.disbursement.common.validator.CurrencyAmountValidator
validator.executeData.80=com.s1.emea.disbursement.domestic.bacs.validator.CustomerReferenceValidator

auditRecord.function.executeData=Execute Midas International Payment: payment sent
validator.executeData.10=com.s1.app.disbursements.validator.NullValidator
auditRecord.class.executeData=com.s1.emea.disbursement.intl.audit.IntlBatchThirdPartyElectronicAudit
history.add.executeData=true

# when a validation failed during the executeData process
Process.executeData_validationFailed.className=com.s1.emea.disbursement.common.process.AuditProcess
auditRecord.function.executeData_validationFailed=Execute Midas International Payment: validation failed

#############

# International Payment Response Process 
# This is the process that will be invoked :
Process.executeData-INTERNATIONALWIRE.className=com.s1.emea.disbursement.intl.wire.process.intlpayments.ExecuteIntlPaymentResponseProcess
# All processes must have a validator chain. This is the default dummy implementation for now:
validator.executeData-INTERNATIONALWIRE.10=com.s1.app.disbursements.validator.NullValidator
# No history for now:
history.add.executeData-INTERNATIONALWIRE=false

Process.applyResponse.className=com.s1.emea.disbursement.common.process.EMEAChangeStatusProcess
validator.applyResponse.10=com.s1.app.disbursements.validator.NullValidator
auditRecord.function.applyResponse=Process International Payment Response
history.add.applyResponse=true

