# The ESAPI validator does many security checks on input, such as canonicalization
# and whitelist validation. Note that all of these validation rules are applied *after*
# canonicalization. Double-encoded characters (even with different encodings involved,
# are never allowed.
#
# To use:
#
# First set up a pattern below. You can choose any name you want, prefixed by the word
# "Validation." For example:
#   Validation.Email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,4}$
#
# Then you can validate in your code against the pattern like this:
#     ESAPI.validator().isValidInput("User Email", input, "Email", maxLength, allowNull);
# Where maxLength and allowNull are set for you needs, respectively.
#
# But note, when you use boolean variants of validation functions, you lose critical 
# canonicalization. It is preferable to use the "get" methods (which throw exceptions) and 
# and use the returned user input which is in canonical form. Consider the following:
#  
# try {
#    someObject.setEmail(ESAPI.validator().getValidInput("User Email", input, "Email", maxLength, allowNull));
#
Validator.SAFESTRING=^[.\\-\\p{Alnum}\\p{Space}]{0,1024}$
Validator.NUMERICSAFESTRING=^[.\\-\\p{Digit}\\p{Space}]{0,1024}$
#GBS-54189 Fix
Validator.NUMERICSTAR=^[*\\.\\-\\p{Digit}\\p{Space}]{0,1024}$

Validator.NumericOnlySafeString=^[.\\p{Digit}]{0,1024}$
Validator.WHOLENUMBERS=^[0-9]*$
Validator.ALPHANUMANDDOT=^[.\\.\\p{Alnum}]{0,1024}$
Validator.ALPHANUMANDUNDERSCORE=^[a-zA-Z0-9_\\- ]+$
Validator.EMAIL=^[A-Za-z0-9._%'-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,20}$
Validator.IPADDRESS=^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
Validator.URL=^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\:\\'\\/\\\\\\+=&amp;%\\$#_]*)?$
Validator.CREDITCARD=^(\\d{4}[- ]?){3}\\d{4}$
Validator.SSN=^(?!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -]?)(?!00)\\d\\d\\3(?!0000)\\d{4}$
Validator.ALPHANUMANDAT=^^[.\\p{Alnum}\\p{Space}[\\)\\(\\+\\-\\:\\?\\.\\@\\/\\'\\,|]*]{0,1024}$
Validator.CITY=^[\\p{Alpha}\\p{Space}]{0,1024}$

Validator.ALPHANUMPUNCTUNDERSCORESPACE=^[.\\p{Alnum}\\p{Space}[\\_\\)\\(\\$\\#\\\\\\|\\{\\}\\`\\^\\[\\>\\<\\*\\"\\]\\;\\=\\~\\&amp;\\!\\+\\-\\:\\?\\@\\%\\.\\/\\'\\,|]*]+$

# following Regex can be used wherever we need a field containing alpunumeric characters and special characters from set{ + - : . , ? ( ) \ '}
Validator.ALPHANUMERICANDPUNCTUATION=^[.\\p{Alnum}\\p{Space}[\\)\\(\\+\\-\\:\\?\\.\\/\\'\\,|]*]{0,1024}$
Validator.ALPHANUMPUNCTUNDERSCORE=^[.\\p{Alnum}\\p{Space}[\\_\\)\\(\\+\\-\\:\\?\\.\\/\\'\\,|]*]{0,1024}$
Validator.ALPHANUMPUNCTUNDERSCORE_COMPANYID=^[.\\p{Alnum}[\\_\\)\\(\\$\\#\\\\\\|\\{\\}\\`\\^\\[\\>\\<\\*\\"\\]\\;\\=\\~\\&amp;\\!\\+\\-\\:\\?\\.\\/\\'\\,|]*]{0,1024}$
Validator.NAME=^[.\\p{Alnum}\\p{Space}\\']{0,1024}$
Validator.AMOUNT=^[.\\p{Digit}\\p{Space}\\.\\,]{0,30}$
# Valid character set for NACHA
Validator.ALPHAMERICLIMITED=^[0-9a-zA-Z\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)\\,\\-\\_\\+\\=\\/\\~ ]+$
Validator.ALPHAMERIC=^[a-zA-Z0-9\\.\\(\\)\\$\\-\\?\\@\\#\\!\\%\\_\\r\\n\\+\\~\\=\\/\\&amp;\\;\\:\\,\\*\\>\\<\\[\\]\\^\\`\\{\\}\\|\\" ]+$
#Added for GBS-39151
Validator.ALPHAMERICANDBACKSLASH=^[a-zA-Z0-9\\.\\(\\)\\$\\-\\?\\@\\#\\!\\%\\_\\~\\=\\+\\/\\&amp;\\;\\:\\,\\*\\>\\<\\[\\]\\^\\`\\{\\}\\|\\\\ ]+$
# Below regex is added for Messaging Group Name which accepts alphanumeric characters and space.
Validator.ALPHANUMERICSPACE=^[0-9a-zA-Z ]+$
# Below regex is added for Group Name which accepts alphanumeric as well as special characters except single quote and double quote.
Validator.ALPHANUMERICSPECIALWITHOUTAPOS=^[^\"\']*$

Validator.PERSONALBANKOID=^[0-9|]*$

# Validators used by ESAPI
Validator.AccountName=^[a-zA-Z0-9]{3,20}$
Validator.SystemCommand=^[a-zA-Z\\-\\/]{1,64}$
Validator.RoleName=^[a-z]{1,20}$
Validator.Redirect=^\\/test.*$

# Global HTTP Validation Rules
# Values with Base64 encoded data (e.g. encrypted state) will need at least [a-zA-Z0-9\/+=]
Validator.HTTPScheme=^(http|https)$
Validator.HTTPServerName=^[a-zA-Z0-9_.\\-]*$
Validator.HTTPCookieName=^[a-zA-Z0-9\\-_]{1,32}$
Validator.HTTPCookieValue=^[a-zA-Z0-9\\-\\/+=_% ]*$
Validator.HTTPHeaderName=^[a-zA-Z0-9\\-_]{1,32}$
Validator.HTTPHeaderValue=^[a-zA-Z0-9()\\-=\\*\\.\\?;,+\\/:&_ ]*$
Validator.HTTPServletPath=^[a-zA-Z0-9.\\-\\/_]*$
Validator.HTTPPath=^[a-zA-Z0-9.\\-_]*$
Validator.HTTPURL=^.*$
Validator.HTTPJSESSIONID=^[A-Z0-9]{10,30}$

# Contributed by Fraenku@gmx.ch
# Googlecode Issue 116 (http://code.google.com/p/owasp-esapi-java/issues/detail?id=116)
Validator.HTTPParameterName=^[a-zA-Z0-9_\\-]{1,32}$
Validator.HTTPParameterValue=^[\\p{L}\\p{N}.\\-/+=_ !$*?@]{0,1000}$
Validator.HTTPContextPath=^/[a-zA-Z0-9.\\-_]*$
Validator.HTTPQueryString=^([a-zA-Z0-9_\\-]{1,32}=[\\p{L}\\p{N}.\\-/+=_ !$*?@%]*&?)*$
Validator.HTTPURI=^/([a-zA-Z0-9,.\\-_:() @%\\*]/?)*$



# Validation of file related input
Validator.FILENAME=^[a-zA-Z0-9.\\-_ ]{0,255}$
Validator.DirectoryName=^[a-zA-Z0-9:/\\\\!@#$%^&{}\\[\\]()_+\\-=,.~'` ]{1,255}$
Validator.FILEDOWNlOADFILENAME=^[a-zA-Z0-9:/\\\\!@#$%^&*|;?"{}\\[\\]()_+\\-=,.~'` ]{1,255}$

# Validation of dates. Controls whether or not 'lenient' dates are accepted.
# See DataFormat.setLenient(boolean flag) for further details.
Validator.AcceptLenientDates=false

Validator.BlackList=^[^<>%$]*$
Validator.CURRENCYCODE=^[A-Z]{3}$
Validator.FULLYQUALIFIEDJAVAFILENAME=([\\p{L}\\_\\p{Sc}][\\p{L}\\p{N}\\_\\p{Sc}]*\\.)*[\\p{L}\\_\\p{Sc}][\\p{L}\\p{N}\\_\\p{Sc}]*
Validator.TIME=^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
Validator.CommaSeparatedObjectIds=^[0-9,]*$

#GBS-51734: Use this regex for fields like User Id, Login ID. This Regex additionally block character ^ and & and allow foreign characters. 
Validator.USERID=^[\\x20-\\xFF&&[^\\x22\\x27\\x7F\\x5E\\x26\\x7C]]*$

######################################## Start of ACH Specific Regular Expressions ########################################


# This is for fields such as recipient name,id
#Validator.ACHPaymentRecipient=^[a-zA-Z0-9¢.<(+|?!\\x20\\xC0-\\xCF]*$


#Validator.ACHALPHAMERIC=^[a-zA-Z0-9¢.<(+|]*$


# 	Recipient name, id, Discretionary Data/Addenda/ Transaction Detail/Address/City fields, Email Type, Billing number, 
#	Company Name, Bank Name
Validator.ACHGroupOne=^[\\x20-\\xFF&&[^\\x22\\x27\\x7F]]*$

#GBS-51734: Use this regex for fields like User Id, Login ID. This Regex additionally block character ^ and & and allow foreign characters. 
Validator.USERID=^[\\x20-\\xFF&&[^\\x22\\x27\\x7F\\x5E\\x26\\x7C]]*$

# Secured Message  
Validator.SECUREMSG=^[\\x20-\\xFF\\x00\\x04\\x0A\\x0D\\x1B\\x08&&[^\\x22\\x27\\x7F]]*$

#	Amount fields
Validator.ACHAmount=^[0-9,.]*$

#	Check Number, Recipient Account Number,Postal Code Type, Trace Number, Secondary Account Number, Secondary Bank ID
Validator.ACHGroupTwo=^[\\x21-\\xFF&&[^;.\\-|\\^!~\\*@\\?%:\\{\\[\\(\\$\\&\\x22\\x27\\x7F]]*$


#	Phone number, Phone Number Type
Validator.ACHPhoneNumberType=^[\\x21-\\xFF&&[^;.|\\^!~\\*@\\?%:\\$\\&\\x22\\x27\\x7F]]*$

#	Secondary - Payment Allocated By (Amt/Percentage)
Validator.ACHGroupThree=^[\\x21-\\xFF&&[^;.\\-|\\^!~\\*@\\?%:\\{\\[\\(\\$\\x22\\x27\\x7F]]*$

#	Company Entry Description
Validator.ACHCompanyEntryDescription=^[\\x20-\\xFF\\x00\\x04\\x0A\\x0D\\x1B\\x08\\x7F]*$

#	Date Fields: Effective Date
Validator.ACHDate=^[0-9/]*$


#	Company Tax ID
Validator.ACHCompanyTaxID=^[\\x21-\\xFF&&[^;.|\\^!~\\*@\\?%\\{\\[\\(\\$\\x22\\x27\\x7F]]*$

#	All Addenda Fields
Validator.ACHAddenda=^[\\x20-\\xFF&&[^\\x7F]]*$

# ACH Bank Name
Validator.ACHBankName=^[\\x20-\\xFF&&[^\\x22\\x7F]]*$

#   Regex for description field like names, id etc
Validator.ACHGroupFour=^[\\x20-\\xFF&&[^\\x22\\x27\\x7F]]*$
######################################## End of ACH Specific Regular Expressions ########################################

#GBS-49950: Use this regex for Affiliate fields like Description, information
Validator.AffiliateGroup=^[\\x20-\\xFF&&[^\\x22\\x27\\x7F]]*$

Validator.AdaptiveAuthGroup=^[\\x21-\\xFF&&[^\\x22\\x27\\x7F]]*$

#GBS-51661: Use this Regex for SAM fields like Campaign Name, Marketing message Name, User name fields
Validator.SAMGroupOne=^[\\x20-\\xFF&&[^\\x22\\x27\\x7F]]*$

# Commitments, sub-commitments and notes and ID , FAX number
Validator.SAMGroupTwo=^[\\x21-\\xFF&&[^;.\\-|\\^!~\\*@\\?%:\\{\\[\\(\\$\\&\\x22\\x27\\x7F]]*$

# Same as group one but dosen't allow space for SAM fields like password and external Auth id.
Validator.SAMGroupThree=^[\\x21-\\xFF&&[^\\x22\\x27\\x7F]]*$

# ID
Validator.SAMGroupFour=^[\\x21-\\xFF&&[^;.|\\^!~\\*@\\?%:\\{\\[\\(\\$\\&\\x22\\x27\\x7F]]*$

#Cheque Services: item type etc...
Validator.CheckServicesGroupOne=^[\\x20-\\xFF\n&&[^\\x22\\x27\\x7F]]*$

Validator.ALPHANUMERIC_SEPA=^[0-9a-zA-Z\\ \\/\\-\\?\\:\\(\\)\\.\\,\\'\\+]+$

# Below regex is added for FI Ids which accepts alphanumeric characters and without space.
Validator.ALPHANUMERIC_WITHOUTSPACE=^[0-9a-zA-Z]+$

# GBS-61482: Below regex is added for Transaction Reference field accepts alphanumeric characters and special character sets [space/-?:().,'+]
Validator.ALPHANUMERIC_SPLCHARSET1=^[0-9a-zA-Z\\ \\/\\-\\?\\:\\(\\)\\.\\,\\'\\+]+$

# Cheque Customer Service Phone NO with hyphen
Validator.SAMPhoneNumber=^[\\x20-\\xFF&&[^;.|\\^!~\\*@\\?%:\\{\\[\\(\\$\\&\\x22\\x27\\x7F]]*$

# 	Administer Challenge Question - This Regex allow apostrophe.
Validator.AdministerChallengeQue=^[\\x20-\\xFF]*$

# All Company Name
Validator.ACHCompanyName=^[\\x20-\\xFF&&[^\\x7F]]*$
#US WIRES
Validator.BlackListUSWire=^[^<>]*$

#Reports - to restrict user from entering Customer Ref number or Bank ref number other than alphanumeric and star at the end e.g(abc12 or abc*) 
Validator.ALPHANUMERICSTAR=^[0-9a-zA-Z]+\\*?+$