<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:sec="http://cxf.apache.org/configuration/security"
	xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:cxf="http://cxf.apache.org/core"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd 
	http://cxf.apache.org/configuration/security
    http://cxf.apache.org/schemas/configuration/security.xsd 
    http://cxf.apache.org/transports/http/configuration
    http://cxf.apache.org/schemas/configuration/http-conf.xsd">


	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<util:constant id="KEYSTORE_PASSWORD"
		static-field="org.apache.wss4j.common.crypto.Merlin.KEYSTORE_PASSWORD" />
			
	<util:constant id="KEYSTORE_PRIVATE_PASSWORD"
		static-field="org.apache.wss4j.common.crypto.Merlin.KEYSTORE_PRIVATE_PASSWORD" />
    
	<util:constant id="TRUSTSTORE_PASSWORD"
		static-field="org.apache.wss4j.common.crypto.Merlin.TRUSTSTORE_PASSWORD" />

	<util:constant id="KEYSTORE_FILE"
		static-field="org.apache.wss4j.common.crypto.Merlin.KEYSTORE_FILE" />

	<util:constant id="TRUSTSTORE_FILE"
		static-field="org.apache.wss4j.common.crypto.Merlin.TRUSTSTORE_FILE" />

	<util:constant id="TRUSTSTORE_TYPE"
		static-field="org.apache.wss4j.common.crypto.Merlin.TRUSTSTORE_TYPE" />

	<util:constant id="KEYSTORE_TYPE"
		static-field="org.apache.wss4j.common.crypto.Merlin.KEYSTORE_TYPE" />
		
	<util:constant id="KEYSTORE_ALIAS"
		static-field="org.apache.wss4j.common.crypto.Merlin.KEYSTORE_ALIAS" />		
		
	<util:constant id="DISABLE_CN_CHECK"
		static-field="com.aci.gsso.ws.security.crypto.CryptoProperties.DISABLE_CN_CHECK" />
				
	<bean id="springBeanFactoryBridge" class="com.s1.arch.spring.SpringBeanFactoryBridge"/>

	<bean id="cloakPropertiesRetriever"
		class="com.aci.gsso.ws.security.crypto.cloak.CloakPropertiesRetriever" init-method="init"></bean>
		
	<bean id="cryptoProperties" class="com.aci.gsso.ws.security.crypto.CryptoProperties" init-method="updateProperties">
		<constructor-arg value="gsso_outbound_keystore.properties"/>
		<property name="cryptoPropertiesRetriever" ref="cloakPropertiesRetriever"/>
	</bean>
	

<!-- 	<jaxws:client id="gssoClient_vO25" abstract="true" 
		serviceClass="com.aci.gsso.service.o25.GSSOOutBound_25SEI" address="Address is set programmatically">
		<jaxws:inInterceptors>
			<ref bean="TimestampSignEncrypt_Response" />
			<bean class="org.apache.cxf.ws.security.wss4j.DefaultCryptoCoverageChecker" />
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<ref bean="TimestampSignEncrypt_Request" />
		</jaxws:outInterceptors>
	</jaxws:client> -->
	
	<bean id="o25ProxyFactory" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean" abstract="true">
		<property name="serviceClass" value="com.aci.gsso.service.o25.GSSOOutBound_25SEI" />
		<property name="address" value="Address is set at runtime(programmatically)" />
		<property name="outInterceptors">
			<list>
				<ref bean="TimestampSignEncrypt_Request" />
			</list>
		</property>
		<property name="inInterceptors">
			<list>
				<ref bean="TimestampSignEncrypt_Response" />
			</list>
		</property>			
	</bean>
	
	<bean id="o25AbstractClient" class="com.aci.gsso.service.o25.GSSOOutBound_25SEI" factory-bean="o25ProxyFactory"
		factory-method="create" abstract="true">
	
	</bean>
    	
	<!-- This bean is needed only if you're using the CXF interceptor method 
		(per above configuration, it's ignored if you're using the WS-SecurityPolicy 
		method.) This bean is an Out interceptor which will add a timestamp, sign 
		the timestamp and body, and then encrypt the timestamp and body. It uses 
		AES as the symmetric key algorithm. -->
	<bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor" 
		id="TimestampSignEncrypt_Request">
		<constructor-arg name="props">
			<map>
				<entry key="action" value="Signature Encrypt" />
				<!-- <entry key="action" value="Timestamp Signature Encrypt" /> -->
				<entry key="user" value="#{cryptoProperties.getProperty(KEYSTORE_ALIAS)}" />
				<!-- <entry key="signaturePropFile" value="com/aci/gsso/ws/gsso_outbound_keystore.properties" 
					/> -->

				<entry key="signaturePropRefId" value="cryptoProperties" />
				<entry key="encryptionPropRefId" value="cryptoProperties" />
				<entry key="cryptoProperties" value-ref="cryptoProperties" />

				<!-- <entry key="encryptionPropFile" value="com/aci/gsso/ws/gsso_outbound_keystore.properties" /> -->
				<!-- <entry key="encryptionUser" value="providera" />  --><!-- alias of the provider -->
				<entry key="passwordCallbackRef" value-ref="cryptoProperties" />

				<!-- <entry key="passwordCallbackClass" value="com.aci.gsso.ws.security.crypto.callback.ClientKeyPasswordCallback" 
					/> -->
				<!-- <entry key="signatureParts" value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body" 
					/> -->
				<entry key="signatureParts"
					value="{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body" />

				<entry key="encryptionParts"
					value="{Element}{http://www.w3.org/2000/09/xmldsig#}Signature;{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#aes128-cbc" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
				<entry key="isBSPCompliant" value="false" />

			</map>
		</constructor-arg>
	</bean>

	<!-- This bean is needed only if you're using the CXF interceptor method 
		(per above configuration, it's ignored if you're using the WS-SecurityPolicy 
		method.) This bean is an In interceptor which will validate a signed, encrypted 
		response, and timestamp it. -->
	<bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"
		id="TimestampSignEncrypt_Response">
		<constructor-arg name="properties">
			<map>
				<entry key="action" value="Signature Encrypt" />
				<!-- <entry key="action" value="Timestamp Signature Encrypt" /> -->
				<entry key="signaturePropRefId" value="cryptoProperties" />
				<entry key="decryptionPropRefId" value="cryptoProperties" />
				<entry key="cryptoProperties" value-ref="cryptoProperties" />
								
<!-- 				<entry key="signaturePropFile" value="com/aci/gsso/ws/gsso_outbound_keystore.properties" />
				<entry key="decryptionPropFile" value="com/aci/gsso/ws/gsso_outbound_keystore.properties" /> -->
				<entry key="passwordCallbackRef" value-ref="cryptoProperties" />
				<!-- <entry key="passwordCallbackClass" value="com.aci.gsso.ws.security.crypto.callback.ClientKeyPasswordCallback" 
					/> -->
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
			</map>
		</constructor-arg>
	</bean>

	<!-- Start of section for logging SOAP message in server logs-->
		<!-- Following section can be enabled in order to see the actual SOAP message(signed and encrypted) in the server logs -->
		<!-- 	<util:constant id="out" static-field="java.lang.System.out" />
	
		<bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor">
			<constructor-arg ref="printWriter"></constructor-arg>
		</bean>
		<bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor">
			<constructor-arg ref="printWriter"></constructor-arg>
		</bean>
	
		<bean id="printWriter" class="java.io.PrintWriter">
			<constructor-arg ref="out"></constructor-arg>
		</bean>
	
		<cxf:bus>
			<cxf:inInterceptors>
				<ref bean="logInbound" />
			</cxf:inInterceptors>
			<cxf:outInterceptors>
				<ref bean="logOutbound" />
			</cxf:outInterceptors>
			<cxf:outFaultInterceptors>
				<ref bean="logOutbound" />
			</cxf:outFaultInterceptors>
			<cxf:inFaultInterceptors>
				<ref bean="logInbound" />
			</cxf:inFaultInterceptors>
		</cxf:bus> -->
	
	<!-- end of section for logging SOAP message in server logs-->
</beans>