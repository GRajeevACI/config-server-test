<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"	
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/util 
                           http://www.springframework.org/schema/util/spring-util-2.5.xsd                           
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <!-- Enable auto-wiring -->
    <context:annotation-config/>
    <!-- Scan for auto-wiring classes in spring saml packages -->
    <context:component-scan base-package="org.springframework.security.saml"/>
    
    <!-- Unsecured pages -->
	<security:http pattern="/logon/logoff" security="none" disable-url-rewriting="false"/>
	
	<!-- Spring Security entry point for SAM User, Authentication via DB -->
	<security:http entry-point-ref="authenticationProcessingFilterEntryPoint" pattern="/logon/authenticate" auto-config="false"
		authentication-manager-ref="UOBAuthenticationManager" use-expressions="false" disable-url-rewriting="false">		
		<security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrentSessionFilter"/>
		<security:custom-filter before="CONCURRENT_SESSION_FILTER" ref="logoutFilter"/>
		<security:custom-filter position="FORM_LOGIN_FILTER" ref="authenticationProcessingFilter"/>					
		<security:anonymous username="roleAnonymous"/>
		<security:intercept-url pattern="/logon/authenticate"
			access="ROLE_CUSTOMER,ROLE_ADMIN" />
		<security:access-denied-handler error-page="/logon/logonpage"/>							
	</security:http>	
    <!-- Secured pages with SAML as entry point -->
    <security:http entry-point-ref="samlEntryPoint" use-expressions="false" disable-url-rewriting="false">
    	<security:csrf disabled="true" />
		<security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrentSessionFilter"/>
		<security:custom-filter before="CONCURRENT_SESSION_FILTER" ref="logoutFilter"/>                    
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        <!-- Below Adds an AnonymousAuthenticationFilter to the stack  -->
        <security:anonymous username="roleAnonymous"/>      
		<security:intercept-url pattern="/logon/targeturl"
			access="ROLE_CUSTOMER,ROLE_ADMIN" />
		<!-- Ensuring that CB User's core login page is always disabled, ROLE_NO_ONE is hypothetical -->	
		<!--security:intercept-url pattern="/logon/sbuser"
			access="ROLE_NO_ONE" / -->
		<!-- START - Added for GBS-64993 -->
		<!--security:intercept-url pattern="/logon/csr"
			access="ROLE_NO_ONE" /-->	
		<!-- END - Added for GBS-64993 -->
		<!-- START : Added this line for GBS-64993 -->
		<security:intercept-url pattern="/api/**"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />		
		<!-- END : Added this line for GBS-64993 -->
		<security:intercept-url pattern="/logon/**"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/userServlet/unprotected/**"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/sbb/unprotected/**"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/prototype/**"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/disbursementscsr/**"
			access="ROLE_ADMIN" />
		<security:intercept-url pattern="/csr/**"
			access="ROLE_ADMIN" />
		<security:intercept-url pattern="/**"
			access="ROLE_CUSTOMER,ROLE_ADMIN" />  
    </security:http>
	
			
    <!-- Filters for processing of SAML messages -->
    <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/logon/saml/login/**" filters="samlEntryPoint"/>
            <security:filter-chain pattern="/logon/saml/logout/**" filters="samlLogoutFilter"/>            
            <security:filter-chain pattern="/logon/saml/SSO/**" filters="uobSamlWebSSOProcessingFilter"/>
            <security:filter-chain pattern="/logon/saml/metadata/**" filters="metadataDisplayFilter"/>
            <!-- <security:filter-chain pattern="/logon/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>  -->
            <security:filter-chain pattern="/logon/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>            
        </security:filter-chain-map>
    </bean>	    

    <!-- Handler deciding where to redirect the 'authenticated but not authorized' user -->
    <bean id="unAuthorizedRedirectHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="true"/>
        <!-- TODO make the below url to parameterized -->
        <property name="defaultFailureUrl" value="${spring.security.saml.unauthorized.user.redirection.page}"/>
    </bean>

    <!-- Handler for successful logout -->
    <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/logout.jsp"/>
    </bean>
	<!-- START - Added id attribute for for GBS-64993 -->
    <security:authentication-manager alias="authenticationManager" id="authenticationManager">
    	<security:authentication-provider ref="anonymousAuthenticationProvider"/>
        <!-- Register authentication manager for SAML provider -->
        <security:authentication-provider ref="samlAuthenticationProvider"/>     
    </security:authentication-manager>

    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

    <!-- Central storage of cryptographic keys -->
    <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
        <constructor-arg value="classpath:${spring.security.saml.java.keystore.classpath.location}"/>
        <constructor-arg type="java.lang.String" value="${spring.security.saml.java.keystore.pwd}"/>
        <constructor-arg>
            <map>
                <entry key="${spring.security.saml.java.keystore.cert.alias}" value="${spring.security.saml.java.keystore.cert.pwd}"/>
            </map>
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="${spring.security.saml.java.keystore.cert.alias}"/>
    </bean>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<property name="binding" value="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"/>
                <property name="includeScoping" value="false"/>
            </bean>
        </property>
    </bean>     
    
    <!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>
    
    <!-- SP & IDP Metadata configuration -->
    <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
        <constructor-arg>
            <list>
                <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
                <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                    <constructor-arg>
                        <bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
                            <constructor-arg>
                                <bean class="java.util.Timer"/>
                            </constructor-arg>
                            <constructor-arg>
                                <bean class="org.opensaml.util.resource.ClasspathResource">
                                	<!-- /security/ssocircle_idp_metadata.xml -->
                                    <constructor-arg value="${spring.security.saml.idp.metadata.file.location}"/>
                                </bean>
                            </constructor-arg>
                            <property name="parserPool" ref="parserPool"/>
                        </bean>
                    </constructor-arg>
                    <constructor-arg>
                        <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                        </bean>
                    </constructor-arg>
                </bean>
                
				<!-- SP (current application) Metadata configuration -->
				<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
					<constructor-arg>
						<bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
							<constructor-arg>
								<bean class="java.util.Timer"/>
							</constructor-arg>
							<constructor-arg>
								<bean class="org.opensaml.util.resource.ClasspathResource">
									<constructor-arg value="${spring.security.saml.sp.metadata.file.location}"/>
								</bean>
							</constructor-arg>
							<property name="parserPool" ref="parserPool"/>
						</bean>
					</constructor-arg>
					<constructor-arg>
						<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
							<property name="local" value="true"/>
							<property name="alias" value="urn:aci:atlanta:uob"/>
							<property name="securityProfile" value="metaiop"/>					
							<!-- <property name="sslHostnameVerification" value="allowAll"/>  -->					
							<property name="signMetadata" value="false"/>
							<property name="signingKey" value="${spring.security.saml.java.keystore.cert.alias}"/>
							<property name="encryptionKey" value="${spring.security.saml.java.keystore.cert.alias}"/> 
							<property name="requireArtifactResolveSigned" value="false"/>
							<property name="requireLogoutRequestSigned" value="false"/>
							<property name="requireLogoutResponseSigned" value="false"/>
							<property name="idpDiscoveryEnabled" value="false"/>							
							<!-- START - Added for GBS-64993 -->
							<property name="supportUnsolicitedResponse" value="true"/>							
							<!-- END - Added for GBS-64993 -->
						</bean>
					</constructor-arg>
				</bean>   
		
            </list>
        </constructor-arg>
        
        <!-- OPTIONAL used when one of the metadata files contains information about this service provider -->
        <property name="hostedSPName" value="urn:com:aci:worldwide:uob:512:poc"/>
        <!-- OPTIONAL property: can tell the system which IDP should be used for authenticating user by default. -->
        <!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
    </bean>

    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->    
    <bean id="samlAuthenticationProvider" class="com.s1.spring.security.authproviders.saml.SAMLAuthProvider">
    <!-- <bean id="samlAuthenticationProvider" class="com.aciworldwide.spring.security.authproviders.saml.SAMLAuthProvider"> -->
    	<property name="forcePrincipalAsString" value="false" />
    	<property name="userDetailsService" ref="samlUserDetailsService" />
    	<property name="extracter" ref="idExtractionStrategy" />        
    </bean>
    <bean id="samlUserDetailsService" class="com.s1.spring.security.userdetails.SAMLUserDetailsService" parent="userDetailsService"/>
    
    <!-- if xtrnlAuthIdPresent is true, then attributeName1 is assumed as xtrnlAuthId and attributeName2 is not used  -->
    <bean id="idExtractionStrategy" class="com.s1.spring.security.authproviders.saml.IdExtractionWithAtt">
    <!-- <bean id="idExtractionStrategy" class="com.aciworldwide.spring.security.authproviders.saml.IdExtractionWithAtt"> -->
    	<property name="xtrnlAuthIdPresent" value="false" />
    	<property name="attributeName1" value="UserId" />
    	<property name="attributeName2" value="CompanyId" />
    </bean>

    <!-- Provider of default SAML Context -->
    <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl"/>

    <!-- Processing filter for WebSSO profile messages -->
    
    <!-- <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter"> -->
	<bean id="uobSamlWebSSOProcessingFilter" class="com.s1.spring.security.filters.saml.UOBSAMLProcessingFilter"> 
        <property name="authenticationManager" ref="authenticationManager"/>     
				
		<property name="ssoEnabled" value="true" />		
		<property name="attemptAuthProc" ref="attemptAuthProcSaml" />		
		<property name="succAuthPostProc" ref="succAuthPostProcSaml" />
		<property name="succAuthPreProc" ref="succAuthPreProcessor" />
		<property name="unsuccAuthProc" ref="unSuccAuthPreProcSaml" />	        
        
        <property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"/>
        <property name="authenticationFailureHandler" ref="unAuthorizedRedirectHandler"/>
        <property name="sessionAuthenticationStrategy" ref="compositeStrategy"/>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="authSuccessSAMLHandler"
          class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/logon/targeturl"/>
        <property name="alwaysUseDefaultTargetUrl" value="true"/>
    </bean>
    
    <!-- Processing filter for WebSSO Holder-of-Key profile -->
    <!-- Currently not using the Web SSO HoK profile, Web SSO Profile seems adequate for us        
    <bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"/>
        <property name="authenticationFailureHandler" ref="unAuthorizedRedirectHandler"/>
    </bean>
	-->
	
    <!-- Logout handler terminating local session -->
    <bean id="logoutHandler"
          class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="false"/>
    </bean>

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="logoutHandler"/>
        <constructor-arg index="2" ref="logoutHandler"/>
    </bean>

    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="logoutHandler"/>
    </bean>

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding"/>
                <ref bean="postBinding"/>
                <ref bean="artifactBinding"/>
                <ref bean="soapBinding"/>
                <ref bean="paosBinding"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- SAML 2.0 WebSSO Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
		<property name="responseSkew" value="60"/>
	</bean>

    <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 Web SSO profile -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>

    <!-- SAML 2.0 Holder-of-Key Web SSO profile -->
    <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 ECP profile -->
    <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
        <constructor-arg>
            <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                <constructor-arg>
                    <bean class="org.apache.commons.httpclient.HttpClient">
                        <constructor-arg>
                            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <property name="processor">
                    <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                        <constructor-arg ref="soapBinding"/>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>

    <!-- Initialization of the velocity engine -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine"/>

    <!-- XML parser pool needed for OpenSAML parsing -->
    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize">
        <property name="builderFeatures">
            <map>
                <entry key="http://apache.org/xml/features/dom/defer-node-expansion" value="false"/>
            </map>
        </property>
    </bean>

	<!-- Below 2 beans coming from security-config.xml, these are required for the startup servlets -->
    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"/>    

	<bean id="jsr303-Validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
		
	<bean id="intrusionDetector" class="com.s1.security.IntrusionDetector">
		<property name="validator" ref="jsr303-Validator" />
	</bean>	

	<bean id="attemptAuthProcSaml" class="com.s1.spring.security.filters.processor.saml.AttemptAuthProcessor" parent="attemptAuthProcessor" />		
	<bean id="succAuthPostProcSaml" class="com.s1.spring.security.filters.processor.saml.SuccAuthPostProcessor" parent="succAuthPostProcessor">
		<property name="userService" ref="userService" />
	</bean>
	<bean id="unSuccAuthPreProcSaml" class="com.s1.spring.security.filters.processor.saml.UnSuccAuthPreProcessor" parent="unSuccAuthPreProcessor" />
	<!-- To fix server startup issue, at a time either security-saml20-config or security-config xml are on and there are some bean defined 
	     mfaf-securtity-config got used in banking-services-defn xml cause server startup error hence adding following import -->
	
	<!-- START Copied the bean definitions as these are from security-config.xml --> 
	
    <!-- AuthenticationManager related beans -->	
	<bean id="UOBSwitchToAuthenticationService" class="com.s1.spring.security.authproviders.UOBSwitchToAuthenticationService">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="userSecurityService" ref="userSecurityService" />
		<property name="preAuthenticationChecks" ref="preAuthenticationChecks" />
		<property name="holdingCompanyService" ref="holdingCompanyService"/>
		<property name="companyService" ref="companyService" />		
		<property name="authorizationService" ref="authorizationService" />
		<property name="systemWorkerService" ref="systemWorkerService" />
	</bean>

	<bean name="webSphereSessionInvalidator" class="com.s1.spring.security.session.WebSphereSessionInvalidator"/>
	
	<!-- Mobile related beans like mobileAuthenticationService, mobileAuthenticationManager, daoAuthenticationProvider and mobileAuthenticationProvider are moved to security-config-common.xml  -->

	<import resource="mfaf-security-config.xml"/>
	
	<!-- END Copied the bean definitions as these are from security-config.xml for GBS-64993 --> 
	
</beans>
